#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Load device assignment records from a CSV linkage file into the sensedoc_assignments table.

Requires the following columns in the CSV:
     interact_id, sensedoc_id, sensedoc_serial,
     start_date,  end_date

Will also load a 'notes' column if one is present.

Usage:
  load_sdlinkage [options] INFILE CITYID WAVEID
  load_sdlinkage -h | --help | -V | --version

Options:
    -h            Display this help info
    -v,--verbose  Provide more verbose output
"""

import os
import csv
import psycopg2
import dateparser
from docopt import docopt
from tqdm import tqdm
from pprint import pprint

def mention(str):
    if args['--verbose']:
        print(str)

def err(str):
    print("ERR: %s"%str)

args = docopt(__doc__, version='0.1.1')
fname = args['INFILE']
wid = int(args['WAVEID'])
cid = int(args['CITYID'])

try:
    #db_name = 'interact_db'
    db_host = os.environ["SQL_LOCAL_SERVER"]
    db_host_port = int(os.environ["SQL_LOCAL_PORT"])
    db_user = os.environ["SQL_USER"]
    db_name = os.environ["SQL_DB"]
    db_schema = os.environ["SQL_SCHEMA"]
except KeyError as err:
    print("A required runtime environment variable was not found.")
    print(err)
    print("Have you set up the run-time secrets?")
    exit(1)


"""
The Postgres table is structured as:
create table portal_dev.sensedoc_assignments (
    id SMALLSERIAL,
    interact_id integer not null,
    sensedoc_serial integer not null,
    city_id integer not null,
    wave_id integer not null,
    started_wearing char(10),
    stopped_wearing char(10),
    Primary Key(id)
);
"""

"""
Unfortunately, SD devices are a bit messy in terms of id values.
We have: 
    a device number, like 124, 
    an alpha value, like 9URBGE 
    and a firmware number, like 2096

    It SEEMS that the proper way to definitively reference a device
    is by the device number and firmware version. This points us
    at a specific hardware object running a specific software version.

    So, to that end, I've been calling that the sensedoc_serial.

    But the sensedocs themselves refer to the devno as a serial number,so we need to follow that lead. 

    Making things more complicated, that six-digit alphanumeric
    also gets called the serial number in some tables. But this was
    a temporary tracking value that was created and used only in 
    Vancouver, so we don't need to track it any further.

    So I am hereby going to declare the following standard terms:
        sensedoc_serial (not id) = the 3-digit integer
        sensedoc_tag = the 6-digit alphanumeric (not ingested)
        sensedoc_revno = the firmware revision number (not ingested)
        sensedoc_id = <serial>_<revno> (not ingested)

        We want the serial and the revno in the table, plus we
        might as well precompute the id.

        But perhaps most importantly, the revno is not being
        tracked by the coordinators, so it will have to be
        computed and added to the linkage file before ingest.
    """

insert_sql = """
    INSERT INTO portal_dev.sensedoc_assignments 
            (interact_id, sensedoc_serial, 
            city_id, wave_id, 
            started_wearing, stopped_wearing)
    VALUES (%s,%s,%s,%s,%s,%s);
    """

clean = True

with psycopg2.connect(user=db_user,
                      host=db_host,
                      port=db_host_port,
                      database=db_name) as conn:
    c = conn.cursor()
    with open(fname, 'r') as fh:
        rows = list(csv.DictReader(fh))
        for row in tqdm(rows):
            iid = row['interact_id']
            serial = row['sensedoc_serial']

            if '/' in serial:
                err("Record for user %s contains multiple serial values (%s)."%(iid,serial)) 
                if clean:
                    err("This practice no longer supported. Each device needs a distinct wear date window in order to filter out extraneous telemetry.")
                clean = False
                continue


            if iid == "NA":
                iid = 0
            elif iid.isnumeric():
                iid = int(iid)

            if '-' in serial:
                serial,dum,revno = serial.partition('-')
            serial = serial.strip()
            if len(serial) > 3:
                print("Serial '%s' seems longer than it should be.")
            if serial.isnumeric():
                serial=int(serial)
            else:
                if serial:
                    print("Squashing unknown sensedoc_serial '%s' to 0"%serial)
                serial = 0

            # Dates in the CSV file are entered inconsistently,
            # so I'm hoping a more flexible date parser will catch
            # them all, rather than having to hand-edit the incoming
            # file to make them consistent.
            start_dt = dateparser.parse(row['start_date'])
            stop_dt = dateparser.parse(row['end_date'])
            if start_dt and stop_dt:
                start_str = start_dt.strftime("%Y-%m-%d")
                stop_str = stop_dt.strftime("%Y-%m-%d")
            else:
                start_str = ''
                stop_str = ''

            c.execute(insert_sql, (iid, serial, cid, wid, 
                                    start_str, stop_str))
        if not clean:
            conn.rollback()

if clean:
    print("File ingested successfully.")
else:
    print("Some records malformed. Ingest not accepted.")
