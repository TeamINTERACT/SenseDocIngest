#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script compares two directory trees to verify whether they contain
identical data content, despite having potentially different hierarchies and filenames.

This is done by creating two checksum fingerprint lists: one for all 
the files in each tree. We then compare the two lists to see that they 
contain identical sets of fingerprints.

Usage:
  verify_refactor [options] ROOTPATH1 ROOTPATH2
  verify_refactor -h | --help | -V | --version

Options:
    -h            Display this help info
    -L FNAME      Save log to FNAME
    -v,--verbose  Provide more verbose output
"""

import os
import hashlib
import datetime
from tqdm import tqdm
from docopt import docopt

loghandle = None
logfile = datetime.datetime.now().strftime(".verify_refactor_%Y%m%d-%H%M%S.log")

def log(msg, prebreak=False):
    if loghandle:
        if prebreak:
            loghandle.write("\n")
        loghandle.write("%s\n" % msg)
        loghandle.flush()
    if prebreak:
        print('')
    print("LOG: %s" % msg)

def mention(str):
    """
    A 'verbosity-aware' print statement.
    """
    if args['--verbose']:
        print(str)

def compute_checksum(fpath):
    """
    For a given absolute filepath, compute the checksum fingerprint.
    Apparently blake2s is faster than md5, and since the method doesn't
    really matter, I'm using blake.
    """
    # fingerprinter = hashlib.md5()
    fingerprinter = hashlib.blake2s()
    mention("Verifying %s" % fpath)
    with open(fpath, "rb") as fh:
        for block in iter(lambda: fh.read(4096), b""):
            fingerprinter.update(block)

    return(fingerprinter.hexdigest())

def list_all_filepaths(rootdir):
    """
    Return a list of all filepaths rooted at rootdir in absolute form.
    """
    fpaths = []
    for root,dirs,files in os.walk(rootdir):
        for f in files:
            fpaths.append( os.path.join(root,f) )
    return(sorted(fpaths, key=os.path.basename))

def checksum_compare_filesets(fpaths1, fpaths2):
    """
    The challenge is to find a way to compare two sets of files for
    identicality without being able to rely on the file names and paths.
    So to do this, we'll traverse one entire pathlist and build a list 
    with checksums for each. Then we'll traverse the second, compute a
    checksum for each of those and remove them from the list.

    If we compute a checksum for the second group that does not exist in
    the checksums of the first group, then it's either already been removed (the file got duplicated) or the file got damaged (hence the reorged one has a different checksum) or it somehow got deleted from the
    reorged hierarchy.

    If the list of final checksums is empty, then everything is good.
    """
    src_checksums = {}
    dest_checksums = {}
    unsourced_list = {}
    with tqdm(total=len(fpaths1)+len(fpaths2)) as pbar:
        # get a list of fingerprints for the source directory
        for fpath in fpaths1:
            src_checksums[compute_checksum(fpath)] = fpath
            pbar.update(1)

        # get a list of fingerprints for the dest directory
        for fpath in fpaths2:
            dest_checksums[compute_checksum(fpath)] = fpath
            pbar.update(1)

        if args['--verbose']:
            log("Fingerprints of source:")
            for finger in src_checksums:
                log("%s %s"%(finger,src_checksums[finger]))
            log("Fingerprints of dest:")
            for finger in dest_checksums:
                log("%s %s"%(finger,dest_checksums[finger]))

        # Compare fingerprints between the directories
        for finger in dest_checksums:
            if finger in src_checksums:
                del src_checksums[finger]
            else:
                unsourced_list[finger] = dest_checksums[finger]
            pbar.update(1)

    if unsourced_list:
        log("The following dest files have no origin in the src tree:")
        for finger in unsourced_list:
            log("  %s  %s"%(finger, unsourced_list[finger]))

    if src_checksums:
        log("The following src files had no match in the dest tree:")
        for finger in src_checksums:
            log("  %s  %s"%(finger, src_checksums[finger]))
    else:
        log("Good news: All checksums match.")


if __name__ == '__main__':
    args = docopt(__doc__, version='0.1.1')

    # if user has specified a log filename, use that instead 
    # of the default
    if args['-L']:
        logfile = args['-L']

    with open(logfile, 'w') as loghandle:
        rootpath1 = args['ROOTPATH1']
        rootpath2 = args['ROOTPATH2']

        fpaths1 = list_all_filepaths(rootpath1)
        fpaths2 = list_all_filepaths(rootpath2)

        if len(fpaths1) == len(fpaths2):
            log("Good news. Both trees contain %d data files."%len(fpaths1))
        else:
            log("Bad news. DIR1 contains %d files while DIR2 has %d"%(len(fpaths1),len(fpaths2)))

        checksum_compare_filesets(fpaths1, fpaths2)
